<!DOCTYPE html>
<html lang="en">

<head>
  <meta name="description" content="ArcGIS REST Export Maps">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>Street Map with Features Overlay</title>
  <link rel="stylesheet" href="https://js.arcgis.com/4.23/esri/css/main.css">
  <script src="https://js.arcgis.com/4.23/"></script>
  <style>
    #mapView {
      height: 600px;
      width: 800px;
    }

    #featureCounters {
      margin-top: 10px;
    }

    #dateInfo {
      margin-top: 10px;
    }

    #dateTable {
      margin-top: 10px;
      border-collapse: collapse;
      width: 100%;
    }

    #dateTable th,
    #dateTable td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }

    #dateTable th {
      background-color: #f2f2f2;
    }
  </style>
</head>

<body>
  <div id="mapView"></div>
  <div id="featureCounters">
    Red Features: <span id="redCounter">0</span>
  </div>
  <div id="dateInfo">
    <table id="dateTable">
      <thead>
        <tr>
          <th>Issue Date</th>
          <th>Repair Date</th>
        </tr>
      </thead>
      <tbody id="dateTableBody"></tbody>
    </table>
  </div>
  <script>
    require([
      "esri/Map",
      "esri/views/MapView",
      "esri/layers/FeatureLayer",
      "esri/renderers/SimpleRenderer"
    ], function(Map, MapView, FeatureLayer, SimpleRenderer) {

      // Counters for red features
      var redCounter = 0;

      // Create a map with the World Street Map basemap
      var map = new Map({
        basemap: "streets"
      });

      // Create a FeatureLayer for the first Feature Service
      var featureLayer1 = new FeatureLayer({
        url: "https://services3.arcgis.com/pcSiFaVR4WP6Y3LN/arcgis/rest/services/Pine_Tree_(S03519)_Cover_Integrity_view_(public)/FeatureServer/0",
        outFields: ["RTech", "RDate", "IDate"], // Include specific fields
        renderer: new SimpleRenderer({
          symbol: {
            type: "simple-marker",
            style: "circle",
            size: 8,
            color: [255, 0, 0], // Red color
            outline: {
              width: 0.5,
              color: [255, 255, 255] // White outline
            }
          }
        })
      });

      // Add Feature Layer to the map
      map.add(featureLayer1);

      // Create a view for the map
      var view = new MapView({
        container: "mapView",
        map: map,
        center: [-82.746498, 42.756589], // Center on Lenox Township Park
        zoom: 15 // You can adjust the zoom level as needed
      });

      // Query the features and update counters
      function updateCounters() {
        var query = featureLayer1.createQuery();
        query.outFields = ["RTech", "RDate", "IDate"];

        featureLayer1.queryFeatures(query).then(function(result) {
          redCounter = result.features.length;
          document.getElementById("redCounter").innerText = redCounter;

          // Display IDate and RDate values in a table, excluding Unix epoch dates
          var dateTableBody = document.getElementById("dateTableBody");
          dateTableBody.innerHTML = ""; // Clear previous rows

          result.features.forEach(function(feature) {
            var iDateTimestamp = feature.attributes.IDate;
            var rDateTimestamp = feature.attributes.RDate;

            var iDate = new Date(iDateTimestamp).toLocaleString();
            var rDate = new Date(rDateTimestamp).toLocaleString();

            // Check if the date is Unix epoch (12/31/1969) and replace with an empty string
            if (iDate.includes("12/31/1969") || rDate.includes("12/31/1969")) {
              iDate = "";
              rDate = "";
            }

            var row = document.createElement("tr");
            var cell1 = document.createElement("td");
            var cell2 = document.createElement("td");

            cell1.textContent = iDate;
            cell2.textContent = rDate;

            row.appendChild(cell1);
            row.appendChild(cell2);
            dateTableBody.appendChild(row);
          });
        });
      }

      // Update counters when the view is updated
      view.watch("updating", function(value) {
        if (!value) {
          updateCounters();
        }
      });

    });
  </script>
</body>

</html>
